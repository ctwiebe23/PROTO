#!/bin/bash

# ======================[ B A P C A T ]=======================
# |                                                          |
# |  AUTHOR : Carston Wiebe (cwiebe3@huskers.unl.edu)        |
# |  DESC   : a BASH-based Python concater                   |
# |  USAGE  : bapcat <src folder> <destination file>         |
# |  ---                                                     |
# |  BAPCAT will take a collection of individual python      |
# |  files and combine them into one amalgamation of a file  |
# |  that contains the contents of each of its constituents  |
# |  in their entirety, with minor editing and reformatting  |
# |  to ensure the final "library-like archive file" will    |
# |  run                                                     |
# |                                                          |
# |  using this tool, we can write code as you would         |
# |  normally-- one class to a file, with good file          |
# |  structure that ensures we aren't trawling through 200   |
# |  lines of unrelated code to find what we're interested   |
# |  in, while still producing a single, runnable file that  |
# |  we can install onto a PI easily                         |
# |                                                          |
# |  in short, this script cats each file into one mother    |
# |  file with all import statements placed at the start of  |
# |  the final output and preceded by a short preamble       |
# |                                                          |
# ============================================================

set -eu  # exit script on error / undefined variable

[ ! "${#@}" = '2' ] && echo 'usage: bapcat <folder> <destination>' && exit 1
[ ! -d "$1" ]       && echo "$1 is not a valid directory"          && exit 2

HOST="$(realpath "$2")"     # HOST file of the amalgamation
CONSTITUENTS=(              # CONSTITUENT files of the amalgamation
  $(ls -1 "$1" \
      | xargs 'realpath' \
      | grep '.py$' \
      | grep -v "^$HOST$")  # prevent a BAPCAT ouroboros
)

# vestigal interfile connections will eventually be purged from the HEAD of our
# creation; prepare grep-compatable regex
VESTIGAL=" $(basename "${CONSTITUENTS[0]}" | cut -d '.' -f 1) "

for INDIVIDUAL in "${CONSTITUENTS[@]:2}"
do
  VESTIGAL+="\| $(basename "$INDIVIDUAL" | cut -d '.' -f 1) "
done

# slap a sticky note onto the HOST's forehead
function WARN {
  echo '# FYI: this code was auto-generated by BAPCAT as a pseudo-library from'
  echo '#   its individual parts and should not be treated as the source code.'
  echo "# Built on: $(date -Iminutes)"
}

WARN > 'WARN.TMP'

cat "${CONSTITUENTS[@]}" | while IFS='' read LINE
do
  # if line starts with 'import' or 'from' append to HEAD
  # else if line isn't a comment or empty append to TAIL
  [[ "$LINE" =~ ^'import'|^'from' ]] && echo "$LINE" >> 'HEAD.TMP' && continue
  [[ ! "$LINE" =~ ^'#'|^\s*$ ]]      && echo "$LINE" >> 'TAIL.TMP'
done

# sort HEAD, purge duplicates and vestigal interfile connections; push WARN,
# HEAD, and TAIL to HOST
cat 'HEAD.TMP' \
  | sort \
  | uniq \
  | grep -v "$VESTIGAL" \
  | cat 'WARN.TMP' - 'TAIL.TMP' \
  > "$HOST"

# dispense of those we no longer have use for
[ -f 'WARN.TMP' ] && rm 'WARN.TMP'
[ -f 'HEAD.TMP' ] && rm 'HEAD.TMP'
[ -f 'TAIL.TMP' ] && rm 'TAIL.TMP'

exit 0
