#!/bin/bash

# probably one of the worse ideas i've had in a while
# anyway, the problem:
#   1) we need MAKE in a single file to easily drag and drop into PIs
#   2) writing all the code consecutively in a large file will become difficult
#      to maintain
#   3) CIRCUITPython does not support python library files like Wheels
# since we need MAKE as a single plain, boring, text-based python file but
# don't want to deal with that, I have decided to implement
#
# +--------------------------------------------------------------------------+
# |                                                                          |
# |                                B A P C A T                               |
# |                                                                          |
# |       - [ the Bash-based Awful Python Condenser And Translator ] -       |
# |                                                                          |
# +--------------------------------------------------------------------------+
#
# BAPCAT will take a collection of individual python files and combine them
# into one horrible amalgamation of a file that contains the contents of each
# of its constituents in their entirety, with minor editing and reformatting to
# ensure the final "library-like archive file" will run
#
# using this amazing tool, we can write code as you would normally-- one class
# to a file, with good file structure that ensures we aren't trawling through
# 200 lines of unrelated code to find what we're interested in, while still
# producing a single, runnable file that we can install onto a PI easily
#
# what is the cost? this. this script cats each file into one mother file,
# preceded by a header declaring where the code came from, and with all import
# statements placed at the start of the final output

IFS=$'\n'  # internal field seperator, must be newlines only to handle code

# don't overwrite anything you don't want to
if [ ! -f 'bapcat' ]
then
  read -p 'are you sure you are in the right directory? (y/n) ' ANS
  if [ ! "$ANS" = 'y' ]
  then
    echo 'terminating program'
    exit 1
  fi
fi

# variable declaration
HOST='../CIRCUITPY/lib/make.py'
CONSTITUENTS=( $(ls | grep '.py$' | grep -v "^$HOST$") )
HEAD=()
TAIL=()

function WARNING {
  echo '# FYI: this code was auto-generated by BAPCAT as a pseudo-library from'
  echo '#   its individual parts and should not be treated as the source code.'
  echo '# Built by: Carston Wiebe (cwiebe3@huskers.unl.edu)'
  echo "# Built on: $(date -I)"
}

# populate buffers
function ABSORB {
  HEAD+=( $(cat $1 | grep -E ^'import'\|^'from') )
  TAIL+=(
    '# ======================'
    "# SOURCE: ${1/'.py'/}"
    '# ======================'
  )
  TAIL+=( $(cat $1 | grep -Ev ^'import'\|^'from'\|^'#') )
}

# push the conglomerate to the host
function GROW {
  for ASPECT in "$@"
  do
    echo "$ASPECT"
  done
}

for INDIVIDUAL in "${CONSTITUENTS[@]}"
do
  ABSORB "$INDIVIDUAL"
done

WARNING > "$HOST"
GROW "${HEAD[@]}" | sort | uniq | grep -v '*' >> "$HOST"
GROW "${TAIL[@]}" >> "$HOST"

exit 0
